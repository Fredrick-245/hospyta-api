// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostCategory {
  NONE
  TECHNOLOGY
  EDUCATION
  ENTERTAINMENT
  RELIGION
  OTHER
}

model User{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  hash String
  firstName String
  lastName String
  posts Post[]
  comments Comment[]
  commentReplies CommentReply[]
  likes Like[]
  dislikes Dislike[]

  @@map("users")

}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  content String
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes Like[]
  dislikes Dislike[]
  commentreplies CommentReply[]
  category PostCategory @default(NONE)
  @@map("posts")
 
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  postId Int
  post Post @relation(fields: [postId], references: [id])
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  likes CommentLikes[]
  dislikes CommentDislikes[]
  replies CommentReply[]
  @@map("comments")

}

model CommentLikes{
  id Int @id @default(autoincrement())
  likedAt DateTime @default(now())
  commentId Int
  comment Comment @relation(fields: [commentId],references: [id])
}

model CommentDislikes{
  id Int @id @default(autoincrement())
  dislikedAt DateTime @default(now())
  commentId Int
  comment Comment @relation(fields: [commentId],references: [id])
}
model CommentReply{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  commentId Int
  userId Int
  postId Int
  comment Comment @relation(fields: [commentId], references: [id])
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("commentReply")
}

model Like {
  id Int @id @default(autoincrement())
  likedAt DateTime @default(now())
  userId Int
  postId Int
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("likes")
}

model Dislike{
  id Int @id @default(autoincrement())
  dislikedAt DateTime @default(now())
  userId Int
  postId Int
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId],references: [id])
}